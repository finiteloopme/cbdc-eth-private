apiVersion: apps/v1
kind: Deployment
metadata:
  name: eth-geth-tx
  labels:
    app: eth-geth-tx
spec:
  replicas: 2
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      app: eth-geth-tx
  template:
    metadata:
      labels:
        app: eth-geth-tx
    spec:
      securityContext:
        runAsUser: 2 # non-root
        fsGroup: 2
      volumes:
      - name: eth-geth-tx-data
        emptyDir: {}
      - name: config
        configMap:
          name: geth-config
          items:
          - key: "genesis.json"
            path: "genesis.json"
      containers:
      - name: geth-tx
        image: ethereum/client-go:stable
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: "1"
          requests:
            cpu: "1"
        command: ["/bin/sh"]
        args:
        - "-c"
        - "geth --datadir='/etc/.ethereum' --bootnodes=`cat /etc/.ethereum/bootnodes` --http --http.corsdomain='*' --http.addr='0.0.0.0' --http.port=8545 --http.api=debug,net,eth,shh,web3,txpool --ws --ws.addr='0.0.0.0' --ws.port=8546 --ws.api=eth,net,web3,network,debug,txpool --ws.origins='*' --http.vhosts=* --networkid=${NETWORK_ID} --ethstats=${HOSTNAME}:${ETHSTATS_SECRET}@${ETHSTATS_SVC} --syncmode=full --gcmode=archive"
        env:
        - name: ETHSTATS_SVC
          value: eth-ethstats
        - name: ETHSTATS_SECRET
          valueFrom:
            secretKeyRef:
              name: eth-ethstats
              key: WS_SECRET
        - name: NETWORK_ID
          valueFrom:
            configMapKeyRef:
              name: geth-config
              key: networkid
        ports:
        - name: rpc
          containerPort: 8545
        - name: ws
          containerPort: 8546
        - name: discovery-udp
          containerPort: 30303
          protocol: UDP
        - name: discovery-tcp
          containerPort: 30303
        volumeMounts:
        - name: eth-geth-tx-data
          mountPath: /etc/.ethereum
      initContainers:
      # Initializes the genesis node.
      - name: init-genesis
        image: ethereum/client-go:release-1.8
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args:
        - "-c"
        - "echo 'Initializing genesis'; geth init  --datadir='/etc/.ethereum' /etc/geth/genesis.json;"
        volumeMounts:
        - name: eth-geth-tx-data
          mountPath: /etc/.ethereum
        - name: config
          mountPath: /etc/geth
      # Gets the bootnodes addresses from bootnode registrar and saves it in bootnodes file.
      - name: get-bootnodes
        image: curlimages/curl
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args:
        - "-c"
        - "if [ -s /geth/bootnodes ]; then rm -f /geth/bootnodes; fi; CNT=0; echo 'retreiving bootnodes from $BOOTNODE_REGISTRAR_SVC'; while [ $CNT -le 90 ]; do curl -m 5 -s $BOOTNODE_REGISTRAR_SVC | xargs echo -n >> /geth/bootnodes; if [ -s /geth/bootnodes ]; then cat /geth/bootnodes; exit 0; fi; echo 'no bootnodes found. retrying $CNT...'; sleep 2 || break; CNT=$((CNT+1)); done; echo 'WARNING. unable to find bootnodes. continuing but geth may not be able to find any peers.'; exit 0;"
        env:
        - name: BOOTNODE_REGISTRAR_SVC
          value: eth-bootnode-registrar
        volumeMounts:
        - name: eth-geth-tx-data
          mountPath: /geth

